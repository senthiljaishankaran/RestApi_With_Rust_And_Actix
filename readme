create new project:
    cargo new --bin project_name

explanation for the dependencies using the makefile we are installing the dependencies:

    we will run this commands in the terminal to add neccessary dependency in Cargo.toml and then execute cargo build to download and install them
    
    cargo install cargo-edit
        This command attempts to install the cargo-edit tool, which allows managing Cargo dependencies directly from the command line by modifying your Cargo.toml file.
    
    cargo add actix-web
        actix-web is a popular web framework in Rust known for its exceptional performance and support for features like HTTP/1.x and HTTP/2.0. It's a great choice for building high-performance APIs.
	
    cargo add actix-cors
        actix-cors provides functionality for handling Cross-Origin Resource Sharing (CORS) in your Actix-web API. This is essential for allowing requests from different domains to interact with your API
	
    cargo add serde_json
        serde_json is a serialization and deserialization library that allows you to easily convert Rust data structures to and from JSON format. This is crucial for sending and receiving data in a web API that uses JSON as its data format
	
    cargo add async-trait 
        this will not be required if the rust vversion is higher than 1.75 before 1.75.0 version we cannot directly use async traits in method so we have to use async-trait crate of rust to define a method is async method or not but after 1.75.0 version we can use that directly
	
    cargo add serde -F derive
        serde allows you to easily convert your Rust structs and other data types to and from different formats like JSON, XML, etc. The -F derive flag enables automatic generation of serialization/deserialization code for your structs, simplifying the process.
	
    cargo add chrono -F serde
        chrono provides libraries for working with dates, times, time zones, and durations. The -F serde flag ensures compatibility with serde for serialization and deserialization of chrono types to and from JSON format.
	
    cargo add futures-util
        futures-util offers building blocks for asynchronous operations, error handling, and composition in Rust. It's often used in conjunction with libraries like async-std or the Tokio runtime for asynchronous programming
	
    cargo add env_logger
        env_logger allows you to define different logging levels (debug, info, error, etc.) based on environment variables. This is helpful for controlling the amount of logging information output in different environments (development, testing, production)
	
    cargo add dotenv
        dotenv helps you keep sensitive configuration details (API keys, database credentials) separate from your source code. You can store them in 
        a .env file that is not included in version control.
	
    cargo add uuid -F "serde v4"
        uuid provides functionality for creating unique identifiers that can be used for various purposes in your application. The -F "serde v4" flag ensures compatibility with the version of serde you're using.
	
    cargo add sqlx -F "tls-native-tls runtime-async-std postgres chrono uuid"
        sqlx is an asynchronous database access library for Rust. The specified features provide:
            tls-native-tls: Support for secure connections using native TLS.
            runtime-async-std: Compatibility with the async-std runtime for asynchronous programming.
            postgres: Enables interaction with PostgreSQL databases.
            chrono: Allows serialization/deserialization of chrono types with sqlx.
            uuid: Might be included for handling UUIDs when working with the database.
	
    cargo add jsonwebtoken
        jsonwebtoken provides tools for encoding, decoding, and validating JWTs. JWTs are a popular mechanism for securely transmitting information between different parts of an application or between applications.
	
    cargo add argon2
        argon2 implements the Argon2 password hashing function, which is considered to be one of the most secure and resistant to brute-force attacks. It's a good choice for storing passwords in a database securely.
	
    cargo add validator -F derive 
        validator provides tools for validating different types of data against certain rules. The -F derive flag allows automatic generation of validation code for your structs, simplifying data validation tasks.

Installing Docker:

    sudo pacman -Syu to update the system
    sudo pacman -S docker to install the docker
    sudo docker version to check version
    sudo systemctl start docker.service to start the docker service
    sudo systemctl enable docker.service to enable the service at startup
    sudo docker info to view information about the application
    sudo docker search [name] to search for the docker image required
    sudo docker pull [image_name] to get the required docker image
    sudo docker run [image_name] to run the image
    sudo docker container ls to monitor and list the running containers
    sudo docker images to list the installed docker images in the system
    sudo docker stats to see the cpu , network and ram usage

What is Docker Compose Configuration file?
    Docker Compose is a tool that simplifies the process of running multi-container Docker applications.
    It uses a configuration file, typically named docker-compose.yml (or .yaml), to define the services, networks, volumes, and other elements that make up your application. 
    This configuration file essentially acts as a blueprint for how Docker Compose should set up and manage your containers.

    Key Components of docker compose configuration file:
        Services: 
            These represent the individual containers that make up your application. 
            Each service section within the configuration defines settings like:

                The image to use for the container (e.g., a specific Docker image from a registry).
                Ports to map between the container and the host machine.
                Environment variables to set within the container.
                Volumes to mount (directories or files that persist data between container runs).
                Dependencies on other services (linking containers together).

        Networks: 
            You can define custom networks for your containers to communicate with each other securely and efficiently. 
            These virtual networks are isolated from the host machine's network.

        Volumes: 
            Volumes allow you to persist data outside of the container itself. 
            This ensures data isn't lost when containers are recreated.
            You can define volumes to map directories or files on the host machine to locations within the container.

        Configs: 
            This section (optional) lets you manage configuration files used by your services. 
            You can define configs that are shared across multiple containers.

        Secrets:
            You can store sensitive information like passwords or API keys as secrets within Docker Compose. 
            This keeps them out of your source code and configuration files.

    Explaination of the docker file:
        Version : Specifies the docker version
        Service : List the multiple services that will be running using the compose file
        Image : Contains the name of the docker image that we will run as a service
        Environment : Contains the Environment variable like username, password, db_name,email,port etc
        Ports : Will have the port numbers mapped from host to docker image to connect ex: 6500:5432
        Volumes : States the location of the persistent that maps directory in the image
        Health-Check : This checks the health of the image here db to make sure that is working
        Networks : This connects the services in the docker to communicate with each other using container name or hostname

    Starting the postgres and pgadmin containers:
        
        docker-compose -f docker-compose.no_api.yml up -d

        breakdown of the command:

            docker-compose: This is the executable for the Docker Compose tool.
            -f docker-compose.no_api.yml: This option specifies the configuration file that Docker Compose should use
            up : This is a subcommand of Docker Compose that tells it to start and run the services defined in the configuration file.
            -d: This flag stands for "detached." When you use it with docker-compose up, the services will be started in the background, and the terminal will prompt you back to the command line without showing logs for the running containers. 
        
        Important docker commands:
            docker pull <image_name>:<tag> 
            <image_name> with the name of the image (e.g., ubuntu) and <tag> with the specific version tag (e.g., latest, 20.04)

            docker build -t <image_name>:<tag> "to build the image"

            docker run -d <image_name>:<tag> "to run the builded image"

            docker ps "to view running containers"

            docker stop <container_id> "to stop a running container"

            docker start <container_id> "to start a stopped container"

            docker rm <container_id> "to remove a unwanted container"


